java_library(
  name = 'closure-compiler',
  srcs = glob(
      includes = [
        'src/**/*.java',

        # TODO(mbolin): Generate these files rather than relying on the versions
        # checked in by the Closure Compiler project.
        'gen/**/*.java',
      ],
      excludes = [
        'src/com/google/javascript/jscomp/jsonml/**/*.java',
        'src/com/google/javascript/jscomp/testing/**/*.java',
        'src/com/google/javascript/jscomp/webservice/**/*.java',
        'src/com/google/javascript/rhino/testing/**/*.java',
      ]),
  resources = [
    ':externs',
    'src/com/google/javascript/jscomp/parsing/ParserConfig.properties',

    # This needs to end up at
    # rhino_ast/java/com/google/javascript/rhino/Messages.properties
    'src/com/google/javascript/rhino/Messages.properties',
  ],
  deps = [
    ':ant',
    ':args4j',
    ':guava',
    ':json',
    ':jsr305',
    ':protobuf',
    ':externs',
#     ':rhino',
  ],
  visibility = [ 'PUBLIC' ],
)

# This rule is hacky. It can be cleaned up once the following Buck issue is fixed:
# https://github.com/facebook/buck/issues/19
# genrule(
#   name = 'gen_rhino',
#   srcs = [
#     'lib/jarjar.jar',
#     'jarjar-rules.txt',
#     '//closure/closure-compiler/lib/rhino:rhino'
#   ],
#   cmd = 'java -jar $SRCDIR/lib/jarjar.jar process $SRCDIR/jarjar-rules.txt $SRCDIR/rhino.jar $OUT',
#   out = 'rhino.jar',
#   deps = [],
# )
# 
# prebuilt_jar(
#   name = 'rhino',
#   binary_jar = ':gen_rhino',
#   deps = [],
#   visibility = [ 'PUBLIC' ],
# )

genrule(
  name = 'externs',
  srcs = glob(['externs/*.js']),
  cmd = 'zip -j $OUT $SRCS',
  out = 'externs.zip',
  deps = [],
  visibility = [ 'PUBLIC' ],
)

prebuilt_jar(
  name = 'ant',
  binary_jar = 'lib/ant.jar',
  visibility = [
    # Closure Templates should really have its own ant.jar and not use
    # includeAntRuntime="true" in its build.xml file.
    '//closure/closure-templates:',
  ],
)

prebuilt_jar(
  name = 'args4j',
  binary_jar = 'lib/args4j.jar',
  visibility = [
    'PUBLIC',
  ],
)

prebuilt_jar(
  name = 'guava',
  binary_jar = 'lib/guava.jar',
)

prebuilt_jar(
  name = 'json',
  binary_jar = 'lib/json.jar',
  visibility = [
    'PUBLIC',
  ],
)

prebuilt_jar(
  name = 'jsr305',
  binary_jar = 'lib/jsr305.jar',
  visibility = [
    'PUBLIC',
  ],
)

prebuilt_jar(
  name = 'protobuf',
  binary_jar = 'lib/protobuf-java.jar',
  visibility = [
    'PUBLIC',
  ],
)
